v0.8.2:
- convert blender-materials to urho3d (very experimental)
  - base,normalmap-textures are copied into export-folder: Textures/import
  - metallic/roughness-inputs generate a new texture that fit our shader (even more experimental)
  - nodes are created and copied textures applied
  - **manual-work**: select appropriate technique
  - you need to create a new nodetree, on nodetree-sidebar, select material and hit 'Create Nodes from Material'
  - **Notice**: For this feature to be visible check in Urho3D-Renderoption "Unstable features" 
- runtime respects view-clipping-settings
- scene-logic nodetree is added to root-node not the scene
- added more 3d-viewport-panels (object,mesh)
- collection-instance-offsets are directly applied to root objects of the collection (not added as transform on collection-node)
- prevent auto-export in edit-mode or selected object has an object-animation, make auto-export optional
- fix morph export
 
v0.8.1:
- stability, not so much crashes anymore
- material's texture-category entries are fixed now. Before adding new folders in could lead to problems with reassigning the right image 
- choose kind of export on save-types (scene with geometry,scene without geometry,material only)
- pack whole export path into one urho3d-pak-file
- export urho3d builtin components (none,lite(some subset),all). Those can be assigned via the 'urho3d-components'-nodetree (not all attributes are exposed,yet)
- added urho3d-tab in 3d-view with components:
  - urho3d-scene:
    - select RenderPath ( those are all renderpaths available in the resource-cache of the exportPath)
    - create default zone with optional cubemap.
    - create SkyBox (For this the urho3d Sphere.mdl is integrated into the runtime's data-folder. So you need to be sure to copy the Sphere.mdl as SkyboxSphere.mdl into your resourcepath)
  - urho3d-materials,components and userdata-assignment (nothing new here, just reused for this panel)
- lights now have a "Use Physical Values"-Option ( for more custom behaviour you can create a component-nodetree with a lightnode and assign this to the light)

